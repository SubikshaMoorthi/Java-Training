                                                                       TRAVERSAL

#BFS
----

import java.util.*;

public class Main 
{
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int e = sc.nextInt();
		
		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++) 
		    adj.add(new ArrayList<>());
		    
		for (int i = 0; i < e; i++) 
		{
			int u = sc.nextInt();
			int v = sc.nextInt();
			adj.get(u).add(v);
			adj.get(v).add(u);
		}
		
		int start = sc.nextInt();
		boolean[] visited = new boolean[n];
		Queue<Integer> q = new LinkedList<>();
		
		q.add(start);
		visited[start] = true;
		
		System.out.print("BFS: ");
		while (!q.isEmpty()) 
		{
			int node = q.poll();
			System.out.print(node + " ");
			for (int neighbor : adj.get(node)) 
			{
				if (!visited[neighbor]) 
				{
					visited[neighbor] = true;
					q.add(neighbor);
				}
			}
		}
		sc.close();
	}
}

Sample I/P

5
4
0 1
0 2
1 3
2 4
0

O/P

BFS: 0 1 2 3 4


#DFS
----

import java.util.*;

public class DFS
{
	static void dfs(int node, List<List<Integer>> adj, boolean[] visited)
	{
		visited[node] = true;
		System.out.print(node + " ");

		for (int neighbor : adj.get(node))
		{
			if (!visited[neighbor])
			{
				dfs(neighbor, adj, visited);
			}
		}
	}

	public static void main(String[] args)
	{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int e = sc.nextInt();

		List<List<Integer>> adj = new ArrayList<>();
		for (int i = 0; i < n; i++)
			adj.add(new ArrayList<>());

		for (int i = 0; i < e; i++)
		{
			int u = sc.nextInt();
			int v = sc.nextInt();
			adj.get(u).add(v);
			adj.get(v).add(u);
		}

		int start = sc.nextInt();
		boolean[] visited = new boolean[n];

		System.out.print("DFS: ");
		dfs(start, adj, visited);
		sc.close();
	}
}

Sample I/P

5
4
0 1
0 2
1 3
2 4
0

O/P

DFS: 0 1 3 2 4
