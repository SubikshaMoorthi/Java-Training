# Binary Search Tree traversal using Stack

import java.util.*;

class Node
{
    int data;
    Node left;
    Node right;
    
    Node(int x)
    {
        data=x;
        left=null;
        right=null;
    }
}

public class Main
{
    Node root;
    public void insert(int val)
    {
        root=insertval(root,val);
    }
    public Node insertval(Node root,int val)
    {
        if(root==null) return new Node(val);
        
        if(val<root.data)
        {
            root.left=insertval(root.left,val);
        }
        else if(val>root.data)
        {
            root.right=insertval(root.right,val);
        }
        return root;
    }
    
    public void inorder()
    {
        Stack<Node> x = new Stack<>();
        Node temp=root;
        
        while(temp!=null||!x.isEmpty())
        {
            while(temp!=null)
            {
                x.push(temp);
                temp=temp.left;
            }
            temp = x.pop();
            System.out.print(temp.data + " ");
            temp=temp.right;
        }
    }
    
    public void preorder()
    {
        if (root == null) 
		{
			return;
		}
		
        Stack<Node> x=new Stack<>();
        x.push(root);
        
        while(!x.isEmpty())
        {
            Node temp = x.pop();
            System.out.print(temp.data+" ");
            
            if(temp.right!=null)
            {
                x.push(temp.right);
            }
            if(temp.left!=null)
            {
                x.push(temp.left);
            }
        }
    }
    
    public void postorder()
    {
        Stack <Node> x=new Stack<>();
        Stack <Node> y=new Stack<>();
        
        if (root == null) 
		{
			return;
		}
		
		x.push(root);
		while(!x.isEmpty())
		{
		    Node temp=x.pop();
		    y.push(temp);
		    
		    if(temp.left!=null)
            {
                x.push(temp.left);
            }
            if(temp.right!=null)
            {
                x.push(temp.right);
            }
		}
		
		while(!y.isEmpty()) 
		{
			System.out.print(y.pop().data+" ");
		}
    }
    
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		Main ob=new Main();
		
		int n=sc.nextInt();
		int [] a = new int[n];
		for(int i=0;i<n;i++)
		{
		    a[i]=sc.nextInt();
		}
		
		while(true)
		{
		    System.out.print("\n1.insert\n2.Inorder\n3.Preorder\n4.Postorder\n5.Exit\nEnter choice:");
		    int c=sc.nextInt();
		    switch(c)
		    {
		        case 1:
		            for(int i:a)
		            {
		                ob.insert(i);
		            }
		            break;
		        case 2:
		            ob.inorder();
		            break;
		        case 3:
		            ob.preorder();
		            break;
		        case 4:
		            ob.postorder();
		            break;
		        case 5:
		            System.out.print("Exiting..");
		            return;
		        default:
		            System.out.print("Invalid");
		    }
		}
	}
}
