                                                        	    TREE DATA STRUCTURE
Tree is a non-linear data structure.

Types
------
  - Binary tree
  - Binary Search tree
  - Avial tree

Binary Tree
-----------
A Binary Tree is a hierarchical data structure in which each node has at most two children:
	- One is referred to as the left child.
	- The other is the right child.

Characteristics:
----------------
	- The topmost node is called the root node.
	- Each node can have 0, 1, or 2 child nodes.
	- A node with no children is called a leaf node.
	- A binary tree is not necessarily ordered (like a BST) or balanced (like an AVL tree).

Tree Traversal Types
--------------------
Traversal means visiting all the nodes in a tree in a specific order.

1. In-order Traversal
	Left -> Root -> Right
2. Pre-order Traversal
	Root -> Left -> Right
3. Post-order Traversal
	Left -> Right -> Root


# Binary Tree without collection (Insert & Traversal)

import java.util.*;
class Node 
{
    int data;
    Node left;
    Node right;
    public  Node(int x)
    {
        this.data=x;
        this.left=null;
        this.right=null;
    }
}

public class Main
{
    Node root;
    public void insert(int v)
    {
        root=insertval(root,v);
    }
    public Node insertval(Node root,int v)
    {
        if(root==null)
        {
            root=new Node(v);
            return root;
        }
        if(v<root.data)
        {
            root.left=insertval(root.left,v);
        }
        if(v>root.data)
        {
            root.right=insertval(root.right,v);
        }
        return root;
    }
    
    public void inorder()
    {
        inordertrv(root);
        System.out.println();
    }
    public void inordertrv(Node root)
    {
        if(root!=null)
        {
            inordertrv(root.left);
            System.out.print(root.data+" ");
            inordertrv(root.right);
        }
    }
    
    public void preorder()
    {
        preordertrv(root);
        System.out.println();
    }
    public void preordertrv(Node root)
    {
        if(root!=null)
        {
            System.out.print(root.data+" ");
            preordertrv(root.left);
            preordertrv(root.right);
        }
    }
    
    public void postorder()
    {
        postordertrv(root);
        System.out.println();
    }
    public void postordertrv(Node root)
    {
        if(root!=null)
        {
            postordertrv(root.left);
            postordertrv(root.right);
            System.out.print(root.data+" ");
        }
    }
    
    public boolean searches(Node root, int k) 
    {
        if (root == null)
            return false;
        if (root.data == k)
            return true;
        if (k < root.data)
            return searches(root.left, k);
        else
            return searches(root.right, k);
    }
    
	public static void main(String[] args) 
	{
		Scanner sc = new Scanner(System.in);
		Main ob=new Main();
		
		int n=sc.nextInt();
		int [] a = new int[n];
		for(int i=0;i<n;i++)
		{
		    a[i]=sc.nextInt();
		}
		
		while(true)
		{
		    System.out.print("\n1.insert\n2.Inorder\n3.Preorder\n4.Postorder\n5.Search\n6.Exit\nEnter choice:");
		    int c=sc.nextInt();
		    switch(c)
		    {
		        case 1:
		            for(int i:a)
		            {
		                ob.insert(i);
		            }
		            break;
		        case 2:
		            ob.inorder();
		            break;
		        case 3:
		            ob.preorder();
		            break;
		        case 4:
		            ob.postorder();
		            break;
		        case 5:
		            int k = sc.nextInt();

                    	    if (ob.searches(ob.root, k))
                        	System.out.println("Found");
                    	    else
                        	System.out.println("Not Found");
                    	    break;
		        case 6:
		            System.out.print("Exiting..");
		            return;
		        default:
		            System.out.print("Invalid choice");
		    }
		}
	}
}

Values can also be inserted manually for BT:
-------------------------------------------
root = new Node(5);
root.left=new Node(3);
root.right=new Node(8);
root.left.left=new Node(4);
root.left.right=new Node(6);
root.right.left=new Node(7);
root.right.right=new Node(11);


