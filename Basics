                                                                      JAVA

- General purpose, High-level, Object oriented programming language.
- Follows WORA (Write Once Run Anywhere) principle -> meaning Java code can run on any device with a Java Virtual Machine (JVM).
- can be used to develop various types of applications.
- Platform independent, portable, secure, robust, and supports multithreaded programming.

JVM - Java Virtual Machine (How it works)
-----------------------------------------
The JVM executes Java bytecode. It consists of:
  - Class Loader: Loads .class files.
  - Bytecode Verifier: Ensures code security.
  - Execution Engine: Converts bytecode into machine code.

JVM, JDK, JRE
-------------
- JDK: Includes development tools and the JRE.
- JRE: Provides the libraries and JVM needed to run Java applications.
- JVM: Executes Java bytecode.

Compiler vs Interpreter
-----------------------
Compiler: Converts the entire source code into machine code at once. Creates an executable file.
Interpreter: Translates and executes code line by line. Does not create a separate executable file.

Basic strcture of Java
----------------------
- Package declaration
- Import necessary libraries
- Create class & code

                                                                  VARIABLES

- A variable is a named storage location in the memory that holds a value, which can be modified during program execution.
- The type of data a variable can hold is determined by its data type.

Types of Variables
------------------
- Local variable: 
      Declared inside a method or block. Accessible only within that scope. Must be initialized before use.
- Instance variable: 
      Declared in a class (outside methods). Each object has its own copy. Automatically gets default values if not initialized.
      Default value -> 0 for int, "null" for String
- Static variable: 
      Declared with static keyword. Shared by all objects of the class. Initialized once at class loading.

                                                                  DATA TYPES

- used to classify data
- Types: Primitive, Non-primitive

Primitive -> Store single, simple values

Data Type              Size            Range                                                                      Default Value            Wrapper Class
---------------------------------------------------------------------------------------------------------------------------------------------------------
byte                   1 byte          -128 to 127                                                                 0                       Byte
short                  2 bytes         -32,768 to 32,767                                                           0                       Short
int                    4 bytes         -2,147,483,648 to 2,147,483,647                                             0                       Integer
long                   8 bytes         -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807                     0                       Long
float                  4 bytes         Approximately ±3.40282347E+38                                               0.0                     Float
double                 8 bytes         Approximately ±1.7976931348623157E+308                                      0.0                     Double
char                   2 bytes         0 to 65,535 (Unicode values)                                                '\u0000'                Character
boolean                1 byte          Values (true or false)                                                      false                   Boolean


Non-primitive -> Can store multiple values or objects.

- Arrays: Data of similar type.
- Classes: Blueprint for creating objects.
- Objects: Instance/reference of a class.
- String: Class that represents a sequence of characters.


Input methods for data types:
- byte: sc.nextByte();
- short: sc.nextShort();
- int: sc.nextInt();
- long: sc.nextLong();
- float: scanner.nextFloat();
- double: scanner.nextDouble();
- char: scanner.next().charAt(0);
- boolean: scanner.nextBoolean();
- String: Single word: scanner.next();
          Full line: scanner.nextLine();


                                                                IDENTIFIERS

An identifier is a name used to identify variables, methods, classes, etc.

Rules for valid identifiers:
----------------------------
- Must start with: a letter (A–Z or a–z), an underscore _
- Can contain letters, digits (0–9), _ , or $ after the first character.
- Cannot use Java reserved keywords (like class, int, etc.).
- Java is case-sensitive (Age and age are different).

Example:
int age1 = 25;    ->Valid identifier
int 1number = 10; ->Invalid (starts with a digit)

                                                              COMMNENTS

Used to explain code. Ignored by Java.

- Single line comments         //
- Multiline comments          /* */
- Documentation (JavaDoc)     /** and */

                                                              OPERATORS

Unary Operators
---------------
- Operate on only one operand.
- Common examples: ++, --, +, -, !, ~

Binary Operators
----------------
- Operate on two operands.
- Most commonly used in Java.

Categories:
-----------
- Arithmetic [+,-,*,/]
- Relational (Comparison) [<,>,==]
- Logical [&&,||,!]
- Bitwise [<<,>>,|,&]
- Assignment [=]

Ternary Operator
----------------
- Operates on three operands.
- Also called conditional operator (?:)

Syntax:
condition ? expr1 : expr2;

If condition is true, returns expr1; else returns expr2.
